{"ast":null,"code":"import * as FlightTableActions from './store/flight-table.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/material/core\";\n\nfunction FlightTableComponent_mat_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const name_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(name_r6);\n  }\n}\n\nfunction FlightTableComponent_div_17_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const flight_r8 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(flight_r8.flt_num);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(flight_r8.destination);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(flight_r8.origin);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(flight_r8.destination_full_name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(flight_r8.origin_full_name);\n  }\n}\n\nfunction FlightTableComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"table\", 14)(2, \"thead\")(3, \"tr\")(4, \"th\", 15);\n    i0.ɵɵtext(5, \"Flight Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\", 15);\n    i0.ɵɵtext(7, \"Desitnation (Short)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\", 15);\n    i0.ɵɵtext(9, \"Origin (Short)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 15);\n    i0.ɵɵtext(11, \"Destination\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\", 15);\n    i0.ɵɵtext(13, \"Origin\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(14, \"tbody\");\n    i0.ɵɵtemplate(15, FlightTableComponent_div_17_tr_15_Template, 11, 5, \"tr\", 9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 16)(17, \"div\", 17)(18, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function FlightTableComponent_div_17_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.handlePrev());\n    });\n    i0.ɵɵtext(19, \" <<< Previous\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function FlightTableComponent_div_17_Template_button_click_20_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.handleNext());\n    });\n    i0.ɵɵtext(21, \"Next >>> \");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.flights);\n  }\n}\n\nfunction FlightTableComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"h2\");\n    i0.ɵɵtext(2, \"No Records Available!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4, \"Either no records of this station exist, or an invalid station has been entered\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction FlightTableComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20);\n    i0.ɵɵelement(2, \"span\", 21);\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport class FlightTableComponent {\n  constructor(store) {\n    this.store = store;\n    this.typingTimer = null;\n    this.sliceCount = 1;\n    this.isLoading = false;\n  }\n\n  ngOnInit() {\n    this.storeSub = this.store.select('flightTable').subscribe(flightState => {\n      this.allFlights = flightState.flights;\n      this.isLoading = flightState.isLoading;\n      this.flightNames = flightState.flightNames;\n      if (this.allFlights.length > 10) this.flights = this.paginate(this.allFlights, 10, 1);else this.flights = this.allFlights.slice(0, this.allFlights.length);\n    });\n  }\n\n  onSearchForFlights(form) {\n    const searchTerm = form.value.search;\n    this.store.dispatch(FlightTableActions.fetchFlights({\n      searchTerm: searchTerm\n    }));\n  }\n\n  onKeyUp(form) {\n    console.log(form);\n\n    if (form.value.search.length > 0) {\n      clearTimeout(this.typingTimer);\n      const searchTerm = form.value.search;\n      this.typingTimer = setTimeout(() => {\n        this.store.dispatch(FlightTableActions.fetchFlightNames({\n          searchTerm: searchTerm\n        }));\n      }, 1000);\n    }\n  }\n\n  onKeyDown() {\n    clearTimeout(this.typingTimer);\n  }\n\n  handlePrev() {\n    this.sliceCount--;\n    const temp = this.paginate(this.allFlights, 10, this.sliceCount);\n    if (temp.length > 0) this.flights = temp;else this.sliceCount++;\n  }\n\n  handleNext() {\n    this.sliceCount++;\n    const temp = this.paginate(this.allFlights, 10, this.sliceCount);\n    if (temp.length > 0) this.flights = temp;else this.sliceCount--;\n  }\n\n  paginate(array, page_size, page_number) {\n    return array.slice((page_number - 1) * page_size, page_number * page_size);\n  }\n\n}\n\nFlightTableComponent.ɵfac = function FlightTableComponent_Factory(t) {\n  return new (t || FlightTableComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\n\nFlightTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FlightTableComponent,\n  selectors: [[\"app-flight-table\"]],\n  decls: 20,\n  vars: 7,\n  consts: [[1, \"container\"], [1, \"row\", \"justify-content-md-center\"], [1, \"col-sm-6\"], [1, \"text-center\"], [1, \"form-inline\"], [\"searchForm\", \"ngForm\"], [1, \"input-group\"], [\"list\", \"search-l\", \"type\", \"text\", \"id\", \"search\", \"ngModel\", \"\", \"name\", \"search\", \"required\", \"\", \"autocomplete\", \"off\", \"matInput\", \"\", 1, \"form-control\", 3, \"matAutocomplete\", \"keyup\", \"keydown\"], [\"auto\", \"matAutocomplete\"], [4, \"ngFor\", \"ngForOf\"], [1, \"input-group-append\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [4, \"ngIf\"], [\"class\", \"text-center my-5\", 4, \"ngIf\"], [1, \"table\", \"table-striped\", \"table-bordered\", \"my-3\", 2, \"background-color\", \"white\"], [1, \"scope\"], [1, \"row\"], [1, \"btn-group\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"mx-4\", 3, \"click\"], [1, \"text-center\", \"my-5\"], [\"role\", \"status\", 1, \"spinner-border\"], [1, \"sr-only\"]],\n  template: function FlightTableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r12 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n      i0.ɵɵtext(4, \"Enter A Station Code or Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"form\", 4, 5)(7, \"mat-form-field\")(8, \"div\", 6)(9, \"input\", 7);\n      i0.ɵɵlistener(\"keyup\", function FlightTableComponent_Template_input_keyup_9_listener() {\n        i0.ɵɵrestoreView(_r12);\n\n        const _r0 = i0.ɵɵreference(6);\n\n        return i0.ɵɵresetView(ctx.onKeyUp(_r0));\n      })(\"keydown\", function FlightTableComponent_Template_input_keydown_9_listener() {\n        return ctx.onKeyDown();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-autocomplete\", null, 8);\n      i0.ɵɵtemplate(12, FlightTableComponent_mat_option_12_Template, 2, 1, \"mat-option\", 9);\n      i0.ɵɵpipe(13, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 10)(15, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function FlightTableComponent_Template_button_click_15_listener() {\n        i0.ɵɵrestoreView(_r12);\n\n        const _r0 = i0.ɵɵreference(6);\n\n        return i0.ɵɵresetView(ctx.onSearchForFlights(_r0));\n      });\n      i0.ɵɵtext(16, \"Search\");\n      i0.ɵɵelementEnd()()()()()()();\n      i0.ɵɵtemplate(17, FlightTableComponent_div_17_Template, 22, 1, \"div\", 12);\n      i0.ɵɵtemplate(18, FlightTableComponent_div_18_Template, 5, 0, \"div\", 13);\n      i0.ɵɵtemplate(19, FlightTableComponent_div_19_Template, 3, 0, \"div\", 13);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(11);\n\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"matAutocomplete\", _r1);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(13, 5, ctx.flightNames));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.flights.length > 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.flights.length == 0 && !ctx.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm, i4.MatFormField, i5.MatInput, i6.MatAutocomplete, i6.MatAutocompleteTrigger, i7.MatOption, i2.AsyncPipe],\n  styles: [\"button[_ngcontent-%COMP%] {\\r\\n    background-color: var(--primary-blue);\\r\\n    color: white;\\r\\n}\\r\\n\\r\\nthead[_ngcontent-%COMP%] {\\r\\n    background-color: var(--primary-blue);\\r\\n    color: white;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZsaWdodC10YWJsZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kscUNBQXFDO0lBQ3JDLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxxQ0FBcUM7SUFDckMsWUFBWTtBQUNoQiIsImZpbGUiOiJmbGlnaHQtdGFibGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImJ1dHRvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWJsdWUpO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG50aGVhZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWJsdWUpO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59Il19 */\"]\n});","map":{"version":3,"mappings":"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","names":["FlightTableActions","i0","FlightTableComponent","constructor","store","ngOnInit","storeSub","select","subscribe","flightState","allFlights","flights","isLoading","flightNames","length","paginate","slice","onSearchForFlights","form","searchTerm","value","search","dispatch","fetchFlights","onKeyUp","console","log","clearTimeout","typingTimer","setTimeout","fetchFlightNames","onKeyDown","handlePrev","sliceCount","temp","handleNext","array","page_size","page_number","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Ariel Davis\\Documents\\code\\angular\\flightselector-frontend\\src\\app\\flight-table\\flight-table.component.ts","C:\\Users\\Ariel Davis\\Documents\\code\\angular\\flightselector-frontend\\src\\app\\flight-table\\flight-table.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\nimport * as fromApp from '../store/app.reducer';\nimport * as FlightTableActions from './store/flight-table.actions';\nimport { Flight } from './flight-model';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-flight-table',\n  templateUrl: './flight-table.component.html',\n  styleUrls: ['./flight-table.component.css'],\n})\nexport class FlightTableComponent implements OnInit {\n  flights: Flight[];\n  allFlights: Flight[];\n  typingTimer = null;\n  flightNames: string[];\n  sliceCount = 1;\n  isLoading = false;\n  storeSub: Subscription;\n  constructor(private store: Store<fromApp.AppState>) {}\n\n  ngOnInit(): void {\n    this.storeSub = this.store\n      .select('flightTable')\n      .subscribe((flightState) => {\n        this.allFlights = flightState.flights;\n        this.isLoading = flightState.isLoading;\n        this.flightNames = flightState.flightNames;\n        if (this.allFlights.length > 10)\n          this.flights = this.paginate(this.allFlights, 10, 1);\n        else this.flights = this.allFlights.slice(0, this.allFlights.length);\n      });\n  }\n\n  onSearchForFlights(form: NgForm) {\n    const searchTerm = form.value.search;\n\n    this.store.dispatch(\n      FlightTableActions.fetchFlights({ searchTerm: searchTerm })\n    );\n  }\n\n  onKeyUp(form: NgForm) {\n    console.log(form);\n\n    if (form.value.search.length > 0) {\n      clearTimeout(this.typingTimer);\n      const searchTerm = form.value.search;\n      this.typingTimer = setTimeout(() => {\n        this.store.dispatch(\n          FlightTableActions.fetchFlightNames({ searchTerm: searchTerm })\n        );\n      }, 1000);\n    }\n  }\n\n  onKeyDown() {\n    clearTimeout(this.typingTimer);\n  }\n\n  handlePrev() {\n    this.sliceCount--;\n    const temp = this.paginate(this.allFlights, 10, this.sliceCount);\n    if (temp.length > 0) this.flights = temp;\n    else this.sliceCount++;\n  }\n\n  handleNext() {\n    this.sliceCount++;\n    const temp = this.paginate(this.allFlights, 10, this.sliceCount);\n    if (temp.length > 0) this.flights = temp;\n    else this.sliceCount--;\n  }\n\n  paginate(array, page_size, page_number) {\n    return array.slice((page_number - 1) * page_size, page_number * page_size);\n  }\n}\n","<div class=\"container\">\n    <div class=\"row justify-content-md-center\">\n        <div class=\"col-sm-6\">\n            <h1 class=\"text-center\">Enter A Station Code or Name</h1>\n            <form \n            #searchForm=\"ngForm\"\n            class=\"form-inline\">\n            <mat-form-field>\n                <div class=\"input-group\">\n                    <input\n                    (keyup)=\"onKeyUp(searchForm)\"\n                    (keydown)=\"onKeyDown()\"\n                    list=\"search-l\"\n                    type=\"text\"\n                    id=\"search\"\n                    class=\"form-control\"\n                    ngModel\n                    name=\"search\"\n                    required\n                    autocomplete=\"off\"\n                    matInput\n                    [matAutocomplete]=\"auto\">\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option *ngFor=\"let name of flightNames | async\">{{name}}</mat-option>\n\n                    </mat-autocomplete>\n                    <!-- <datalist id=\"search-l\">\n                    </datalist> -->\n                    <div class=\"input-group-append\">\n                        <button (click)=\"onSearchForFlights(searchForm)\" class=\"btn btn-primary\" type=\"button\">Search</button>\n                    </div>\n                </div>\n            </mat-form-field>\n            </form>\n        </div>\n    </div>\n    <div *ngIf=\"flights.length > 0\">\n        <table class=\"table table-striped table-bordered my-3\" style=\"background-color: white;\">\n            <thead>\n                <tr>\n                    <th class=\"scope\">Flight Number</th>\n                    <th class=\"scope\">Desitnation (Short)</th>\n                    <th class=\"scope\">Origin (Short)</th>\n                    <th class=\"scope\">Destination</th>\n                    <th class=\"scope\">Origin</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let flight of flights\">\n                    <td>{{ flight.flt_num }}</td>\n                    <td>{{ flight.destination }}</td>\n                    <td>{{ flight.origin }}</td>\n                    <td>{{ flight.destination_full_name }}</td>\n                    <td>{{ flight.origin_full_name }}</td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"row\">\n            <div class=\"btn-group\">\n                <button type=\"button\" class=\"btn btn-primary mx-4\" (click)=\"handlePrev()\"> <<< Previous</button>\n                <button type=\"button\" class=\"btn btn-primary mx-4\" (click)=\"handleNext()\">Next >>> </button>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"flights.length == 0 && !isLoading\" class=\"text-center my-5\">\n        <h2>No Records Available!</h2>\n        <p>Either no records of this station exist, or an invalid station has been entered</p>\n    </div>\n    <div class=\"text-center my-5\" *ngIf=\"isLoading\">\n        <div class=\"spinner-border\" role=\"status\">\n            <span class=\"sr-only\"></span>\n        </div>\n    </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}